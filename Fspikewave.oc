/*----------------------------------------------------------------------------

Implementation of:
Destexhe, Alain, "Spike-and-Wave Oscillations Based on the Properties of GABAB Receptors"
The Journal of Neuroscience, November 1, 1998, 18(21):9099-9111

Andrew Knox 2014


----------------------------------------------------------------------------*/

ncorticalcells = 100
nthalamiccells = 100
narrowdiam = 5
widediam = 10

Dt = 0.1
dt = 0.1			// must be submultiple of Dt
npoints = 3000
stimtime = 50			
tstart = 0
tstop = 1000
randomstim = 0

fieldlower = 30
fieldupper = 70
fielddist = 50

watchneuron = 50 
axondelay = 0

smallPY = 1
mediumPY = 0
largePY = 0
largePYhole = 0
smallPYhole = 0
mediumPYoffset = 7
largePYoffset = 2

gabaapercent = 1
gababpercent = 1

//----------------------------------------------------------------------------
//  load and define general graphical procedures
//----------------------------------------------------------------------------

load_file("nrngui.hoc")


objectvar g[20]			// max 20 graphs
objectvar g1, g2, g3, g4
ngraph = 0


proc addgraph() { local ii	// define subroutine to add a new graph
				// addgraph("variable", minvalue, maxvalue)
	ngraph = ngraph+1
	ii = ngraph-1
	g[ii] = new Graph(0)
	g[ii].view(0,1,0,1, int(ii/2)*550+80, ii%2*450+100, 400, 300)
//	g[ii].view(0,1,0,1, int(ii/2)*350+50, ii%2*260+80, 300, 200)
	g[ii].size(tstart,tstop,$2,$3)
	g[ii].xaxis()
	g[ii].yaxis()
	g[ii].addvar($s1,1,0)
	g[ii].save_name("graphList[0].")
	graphList[0].append(g[ii])
}

proc addfieldgraph() { local ii	// hack solution for a better positioned graph of electrical field
	ngraph = ngraph+1
	ii = ngraph-1
	g[ii] = new Graph(0)
	g[ii].view(0,1,0,1, 650, 0, 800, 300)
	g[ii].size(tstart,tstop,$2,$3)
	g[ii].xaxis()
	g[ii].yaxis()
	g[ii].addvar($s1,1,0)
	g[ii].save_name("graphList[0].")
	graphList[0].append(g[ii])
}

proc addtext() { local ii	// define subroutine to add a text graph
				// addtext("text")
	ngraph = ngraph+1
	ii = ngraph-1
	g[ii] = new Graph()
	g[ii].size(0,tstop,0,1)
	g[ii].xaxis(3)
	g[ii].yaxis(3)
	g[ii].label(0.1,0.5,$s1)
	g[ii].save_name("graphList[0].")
	graphList[0].append(g[ii])
	text_id = ii
}

proc addline() {		// to add a comment to the text window

				// addline("text")
	g[text_id].label($s1)
}

proc addgraph() {}
proc addfieldgraph() {}

objectvar synfile
synfile = new File()
//synfile.wopen(" C:\\Users\\aknox\\Desktop\\synapses.txt")
////synfile.wopen("/cygdrive/c/Users/aknox/Desktop/synapses.txt")

objref membranedatafile
membranedatafile = new File()


//----------------------------------------------------------------------------
// initialize stimulus variables
//----------------------------------------------------------------------------


nstimsynapses = 1
timefirststimulus = 20000
nstimuli = 1
nhfburst = 6
timestimuli = 500
timehfburst = 3		//2.5


objectvar ampavec[nstimsynapses]
objectvar ampatimevec[nstimsynapses]
double Vampa[nstimsynapses]
nstimsynapses = 1

//----------------------------------------------------------------------------
// global simulation variables
//----------------------------------------------------------------------------

//stuff for raster plot
objref tobj, nil

objref PYtimevec, PYidvec, INtimevec, INidvec, REtimevec, REidvec, TCtimevec, TCidvec, recncs, recveclist

recncs = new List()
recveclist = new List()

field = 0
fieldg = 0
ampafield = 0
gabaafield = 0
gababfield = 0
gababTCfield = 0

//----------------------------------------------------------------------------
//  setup simulation parameters
//----------------------------------------------------------------------------


objectvar Sim			// create vector of simulation points
Sim = new Vector(npoints)

tstop = 1000
runStopAt = tstop
steps_per_ms = 1/Dt
celsius = 36
v_init = -70			//originally 70

objectvar randvolt
randvolt = new Random()
randvolt.uniform(-80,-65)

objref lstate 
objref statefile

//Synapse parameters
	Alpha_AMPA_S = 0.94		// kinetics from simplex with short pulses
	Beta_AMPA_S = 0.18 //0.18
	Cmax_AMPA_S = 0.5
	Cdur_AMPA_S = 0.3
	Erev_AMPA_S = 0

	Alpha_GABAa_S = 20		// from diffusion model
	Beta_GABAa_S = 0.162
	Cmax_GABAa_S = 0.5		// short pulses
	Cdur_GABAa_S = 0.3
	Erev_GABAa_S = -85		// Rinzel's Erev

	K1_GABAb_S	= 0.09//  0.09  //	(/ms mM) forward binding to receptor
	K2_GABAb_S	= 0.0012 // 0.0012 //	(/ms)	backward (unbinding)of receptor
	K3_GABAb_S	= 0.18 //0.098 // 0.18	//	(/ms)	rate of G-protein production
	K4_GABAb_S	= 0.034//0.034	(/ms)	rate of G-protein decay  -  larger number = slower decay?
	KD_GABAb_S	= 100	//	dissociation constant of K+ channel
	n_GABAb_S	= 4	//	nb of binding sites of G-protein on K+
	Erev_GABAb_S	= -95	//	(mV)	reversal potential (E_K)
	Cmax_GABAb_S = 0.5	// short pulses
	Cdur_GABAb_S = 0.3


//----------------------------------------------------------------------------
//  Gap Junctions from PY to PY
//----------------------------------------------------------------------------
/*
nPYPYgap = 1	// nb of PY cells receiving gap junctions from one PY cell

objectvar pypyGap[ncorticalcells][nPYPYgap*2]

for i=nPYPY,ncorticalcells-1-nPYPYgap {
//for i=45,55 {
   for j=0,nPYPYgap-1 {
	pypyGap[i][j] = new gap()
//	print "setpointer:",i+j+1,j,i
	PY[i+j+1].soma pypyGap[i][j].loc(0.5)		// postsynaptic is PY[j] 
	setpointer pypyGap[i][j].vgap, PY[i].soma.v	// presynaptic is PY[i]
	pypyGap[i][j+nPYPYgap] = new gap()
	PY[i-j-1].soma pypyGap[i][j+nPYPYgap].loc(0.5)		// postsynaptic is PY[j]
//	print "setpointer:",i-j-1,j,i 
	setpointer pypyGap[i][j+nPYPYgap].vgap, PY[i].soma.v	// presynaptic is PY[i]
	pypyGap[i][j].r = 1.25e6
	pypyGap[i][j+nPYPYgap].r = 1.25e6
   }
}
*/

Alpha_AMPA_S = 0.94		// kinetics from simplex with short pulses
Beta_AMPA_S = 0.18
Cmax_AMPA_S = 0.5
Cdur_AMPA_S = 0.3
Erev_AMPA_S = 0


proc assign_synapses() {	// procedure to assign syn conductances 
				// params: 1=intraRE (RERE), 2=GABAa in TC (RETC),
				// 3=GABAb in TC, 4=AMPA in RE (TCRE)
				// 5=PYPY 6=PYIN 7=GABAa INPY
				// 8=GABAb INPY 9=PYRE 10=PYTC
				// 11=TCPY 12=TCIN
  // print "nRERE:", nRERE, "nRETC:", nRETC, "nTCRE:", nTCRE, "nPYPY:", nPYPY, "nINPY:", nINPY, "nPYRE:", nPYRE, "nPYTC:", nPYTC, "nTCPY:", nTCPY, "nTCIN:", nTCIN
  for i=0, nthalamiccells-1 {
    for j=0, RE[i].REgabaalist.count()-1 {
	RE[i].REgabaalist.object(j).weight = $1 / nRERE               
    }
    for j=0, TC[i].REgabaalist.count()-1 {
	TC[i].REgabaalist.object(j).weight = $2 / nRETC
    }
    for j=0, TC[i].gababpost.count()-1 {
	TC[i].gababpost.object(j).gmax = $3 / nRETC
	//TC[i].REgabablist.object(j).weight = $3 / nRETC
    }
    for j=0, RE[i].TClist.count()-1 {
	RE[i].TClist.object(j).weight = $4 / nTCRE
    }
 
    for j=0, RE[i].PYlist.count()-1 {  		
	RE[i].PYlist.object(j).weight = $9 / nPYRE
    }
    for j=0, TC[i].PYlist.count()-1 {
	TC[i].PYlist.object(j).weight = $10 / nPYTC
    }
  }
  for i=0, ncorticalcells-1 {
    for j=0, PY[i].PYlist.count()-1 {
	PY[i].PYlist.object(j).weight = $5 / nPYPY
	// print "PY", i, j, PY[i].PYlist.object(j).weight
    }
    for j=0, IN[i].PYlist.count()-1 {
	IN[i].PYlist.object(j).weight = $6 / nPYIN
    }
    for j=0, PY[i].INgabaalist.count()-1 {
	PY[i].INgabaalist.object(j).weight = $7 / nINPY
    }
    for j=0, PY[i].gababpost.count()-1 {
	PY[i].gababpost.object(j).gmax = $8 / nINPY
	//PY[i].INgabablist.object(j).weight = $8 / nINPY
    }
    for j=0, PY[i].TClist.count()-1 {			
	PY[i].TClist.object(j).weight  = $11 / nTCPY
    }
    for j=0, IN[i].TClist.count()-1 {			
	IN[i].TClist.object(j).weight = $12 / nTCIN
    }
  }
}

// params: RERE, RETCa,RETCb,TCRE, PYPY, PYIN, INPYa, INPYb, PYRE, PYTC, TCPY, TCIN
//assign_synapses(0.2,0.02,0.04,0.2,0.6,0.2,0.15,0.03,1.2,0.01,1.2,0.4)		// synaptic weights J neurophys
//assign_synapses(0.2,0.02,0.04,0.2,0.6,0.2,0.1125,0.03,1.2,0.01,1.2,0.4)		// 75% IN->PY weight (0.1125)
//assign_synapses(0.2,0.02,0.04,0.2,0.6,0.2,0.075,0.03,1.2,0.01,1.2,0.4)		// 50% IN->PY weight (0.075)
//assign_synapses(0.2,0.02,0.04,0.2,0.6,0.2,0.06,0.03,1.2,0.01,1.2,0.4)		// 40% IN->PY weight (0.06)
//assign_synapses(0.2,0.02,0.04,0.2,0.6,0.2,0.0375,0.03,1.2,0.01,1.2,0.4)		// 25% IN->PY weight (0.0375)
//assign_synapses(0.2,0.02,0.04,0.2,0.6,0.2,0.015,0.03,1.2,0.01,1.2,0.4)		// 10% IN->PY weight (0.015)
//assign_synapses(0.2,0.02,0.04,0.2,0.6,0.2,0.0,0.03,1.2,0.01,1.2,0.4)		// 0% IN->PY A weight
//assign_synapses(0.2,0.02,0.04,0.2,0.6,0.2,gabaapercent*0.15,gababpercent*0.03,1.2,0.01,1.2,0.4)		// 0% IN->PY A weight  
//assign_synapses(0.12,0.02,0.04,0.2,0.6,0.2,0,0.03,1.2,0.01,1.2,0.4)		// 0% IN->PY A weight, better RERE for new synapses
//assign_synapses(0,0,0.04,0.2,0.6,0.2,0.15,0.03,1.2,0.01,1.2,0.4)		// 0% RERE and RETC
//assign_focal_gabaa_synapses(0,0,45,55)

proc assign_focal_gabaa_synapses() {	// procedure to assign syn conductances 
				// params: 1=GABAa in TC (RETC), 2=GABAa INPY
				// 3 = lower limit id
				// 4 = upper limit id
  for i=$3, $4 {
    for j=0, TC[i].gabaalist.count()-1 {
	TC[i].REgabaalist.object(j).gmax = $1 / nRETC
    }
    for j=0, TC[i].gabablist.count()-1 {
	TC[i].REgabablist.object(j).gmax = $2 / nRETC
    }
  }
}


objectvar rgh, rk1
rgh = new Random()
rk1 = new Random()
//rgh.uniform(1.5e-5,2e-5)
//rk1.uniform(0.003,0.005)
//rgh.normal(17.5,0.8)        //random number generator behaves weirdly for very small numbers, so multiply by 1e-6 below
//rk1.normal(40,3)
rgh.normal(17.5,0.0008)        //random number generator behaves weirdly for very small numbers, so multiply by 1e-6 below
rk1.normal(40,0.003)

// setup TC cells in resting mode (no spontaneous oscillation)
for i=0,nthalamiccells-1 { 
  TC[i].soma.ghbar_iar = rgh.repick() * 1e-6   //1.5e-5, 0.66e-3 for human
  TC[i].kl.gmax = rk1.repick() * 1e-4         //0.003
  TC[i].soma.ghbar_iar = 1.5e-5 //, 0.66e-3 for human
  TC[i].kl.gmax = 0.003
  // print "TC(",i,") gh:",TC[i].soma.ghbar_iar," gmax:",TC[i].kl.gmax
}

// setup first TC cell as an initiator (spontaneous waxing-waning)
// TC[0].soma.ghbar_iar = 2.5e-5	// long interspindle period
// TC[0].kl.gmax = 0.005

//TC[50].soma.ghbar_iar = 2e-5	// shorter interspindle period
//TC[50].kl.gmax = 0.005

//----------------------------------------------------------------------------
//  setup stimulus vectors and synapses to pyramidal cell(s)
//----------------------------------------------------------------------------
objectvar jitter
jitter = new Random()

jitter.uniform(-1,1)


for ctr=0,nstimsynapses-1 {
   ampavec[ctr] = new Vector()
   ampatimevec[ctr] = new Vector()
   Vampa[ctr] = 0

   ampavec[ctr].append(-60)
   ampatimevec[ctr].append(tstart)

   for i=0, nstimuli-1 {
     for j=0, nhfburst-1 {
       stime = timefirststimulus + i*timestimuli + j*timehfburst + jitter.repick()
       ampatimevec[ctr].append(stime)
       ampavec[ctr].append(10)
       ampatimevec[ctr].append(stime+2*Dt)
       ampavec[ctr].append(-60)
     }
   }

   ampavec[ctr].play(&Vampa[ctr],ampatimevec[ctr])
}

objectvar pyampa[nstimsynapses]
for i=0,nstimsynapses-1 {
 

//   pyampa[i] = new AMPA_S()
//   PY[50].soma pyampa[i].loc(0.5)
//   PY[40 + 10 * int(i/50)].soma pyampa[i].loc(0.5)	 
//   setpointer pyampa[i].pre, Vampa[i]
//   pyampa[i].gmax = 0 //0.05
   
}




//----------------------------------------------------------------------------
//  add graphs
//----------------------------------------------------------------------------

//addgraph("tcB[0][0].g",0,0.05)
//addgraph("TC[0].soma.o2_iar",0,1)
//addgraph("TC[0].soma.p1_iar",0,1)
//addgraph("Vampa[50]",-70,15)
//addgraph("TC[50].soma.ina",-.02,.001)

//addgraph("TC[50].soma.cai",0,.001)
//addgraph("TC[watchneuron].soma.ih",-.001,.001)
//addgraph("PY[watchneuron].soma.ina",-1,.001)
//addgraph("PY[watchneuron].ampapostPY.i", -20, 0)
//addgraph("PY[watchneuron].ampapost.synon", 0, 2)
//addgraph("PY[watchneuron].soma.ik",-.002,1)
//addgraph("PY[watchneuron].soma.ik_im",-.002,.1)
//addgraph("TC[50].soma.ica",-.02,.001)

//addgraph("RE[50].soma.ica",-.02,.001)
//addgraph("RE[50].soma.ica_itrecustom",-.02,.001)


strdef gtxt
//for i=0,ncells-1 {
//for i=50,51 {
i=watchneuron
	sprint(gtxt,"TC[%d].soma.v(0.5)",i)
	addgraph(gtxt,-120,40)
	sprint(gtxt,"RE[%d].soma.v(0.5)",i)
	addgraph(gtxt,-120,40)
        sprint(gtxt,"PY[%d].soma.v(0.5)",i)
	addgraph(gtxt,-120,40)
	sprint(gtxt,"IN[%d].soma.v(0.5)",i)
	addgraph(gtxt,-120,40)
//}


addfieldgraph("field",-5,5)
//addfieldgraph("fieldg",-0.5,0.5)
//addgraph("ampafield",-10,10)
//addgraph("gabaafield",-.5,.5)
//addgraph("gababfield",-.1,.1)
//addgraph("gababTCfield",-.1,.1)


//single neuron
/*
addfieldgraph("field",-100,100)
//addfieldgraph("fieldg",-0.005,0.005)
//addgraph("ampafield",-100,100)
//addgraph("gabaafield",-100,100)
//addgraph("gababfield",-.01,10)
//addgraph("gababTCfield",-.01,1)
*/

//-----------------------------------------------------------------------------
// Make raster plots
//-----------------------------------------------------------------------------


proc rasterplot() {
  print "plot:", tstart, tstop
  //PYtimevec.printf()
  //PYidvec.printf()
  plotlen = 3000 
  g1 = new Graph(0)
  g1.label(0.5, 0.95, "PY")
  g1.view(tstart,0,plotlen,100,100,500,400,300)
  PYidvec.mark(g1, PYtimevec,"o",2)
  g2 = new Graph(0)
  g2.label("IN")
  g2.view(tstart,0,plotlen,100,650,500,400,300)
  INidvec.mark(g2, INtimevec,"o",2)
  g3 = new Graph(0)
  g3.label(0.5, 0.95,"RE")
  g3.view(tstart,0,plotlen,100,650,500,400,300)
  REidvec.mark(g3, REtimevec,"o",2)
  g4 = new Graph(0)
  g4.label(0.5, 0.95,"TC")
  g4.view(tstart,0,plotlen,100,1200,500,400,300)
  TCidvec.mark(g4, TCtimevec,"o",2)
}



//-----------------------------------------------------------------------------
// Write recorded membrane data to file
//-----------------------------------------------------------------------------

proc writedatafile()  {

  membranedatafile.wopen("membrane_data.txt")
////synfile.wopen("/cygdrive/c/Users/aknox/Desktop/synapses.txt")

//only take every other time point to avoid annoying memory errors.
  membranedatafile.printf("%d\n",TCVtrace[0].size())
  membranedatafile.printf("%d\n",ncorticalcells)		//also needs fixing
  for i=0,nthalamiccells-1 {
    TCVtrace[i].printf(membranedatafile)
  }
  for i=0,nthalamiccells-1{
    REVtrace[i].printf(membranedatafile)
  }
  for i=0,ncorticalcells-1{
    PYVtrace[i].printf(membranedatafile) 
  }
  for i=0,ncorticalcells-1{
    INVtrace[i].printf(membranedatafile)
  }

  
  membranedatafile.close()
}

//--------------------------------------------------------------------------
// Save state
//--------------------------------------------------------------------------

objref sstate, statefile 

proc writestate()  {
   sstate = new SaveState()
   sstate.save()
   statefile = new File()
   statefile.wopen("state_data.txt")
   sstate.fwrite(statefile)
}

////////////////////////////////////////////////////////////////////////
//  Code for dealing with field potentials
///////////////////////////////////////////////////////////////////////

func xfield()  {local i, j, tmp, Ni, Re, x, cw   
//$1 is Re, $2 is distance from nearest neuron, $3 is neuron to which probe is closest
//assumes field comes from PY neurons, which are in a row spaced 20um apart
   total_field = 0
   Re = $1
   x = $2
   Ni = $3

   for i = fieldlower, fieldupper {
//	if (PY[i].soma.v(0.5) < -70) {
	   tmp = 0
	   for j = 0, PY[i].gababpost.count()-1 {
		tmp += PY[i].gababpost.object(j).i
	   }

	   tmp += PY[i].gabaapost.i  + PY[i].soma.ik_im + PY[i].ampapostPY.i + PY[i].ampapostTC.i

	   total_field += tmp / sqrt(x^2 + 400*(Ni-i)^2)
//	}
   }
   return total_field * Re/4/PI
}

func xfieldg()  {local i, j, tmp, Ni, Re, x, cw   
//$1 is Re, $2 is distance from nearest neuron, $3 is neuron to which probe is closest
//assumes field comes from PY neurons, which are in a row spaced 20um apart
   total_field = 0
   Re = $1
   x = $2
   Ni = $3

   for i = fieldlower, fieldupper {
	tmp = 0
	for j = 0, PY[i].gababpost.count()-1 {
		tmp += PY[i].gababpost.object(j).g
	}

	tmp += (PY[i].gabaapost.g - PY[i].ampapostPY.g - PY.ampapostTC.g) //+ PY[i].soma.ik_im


	total_field += tmp / sqrt(x^2 + 400*(Ni-i)^2)
   }
   return total_field * Re/4/PI
}

func ampa()  {local i, Ni, Re, x   
//$1 is Re, $2 is distance from nearest neuron, $3 is neuron to which probe is closest
//assumes field comes from PY neurons, which are in a row spaced 20um apart
   total_field = 0
   Re = $1
   x = $2
   Ni = $3
   for i = fieldlower, fieldupper {
	total_field += (PY[i].ampapostPY.i) //+ PY[i].ampapostTC.i) // sqrt(x^2 + 400*(Ni-i)^2)
//	total_field += PY[i].soma.ik_im // sqrt(x^2 + 400*(Ni-i)^2)
   }
   return total_field //* Re/4/PI
}

func gabaa()  {local i, Ni, Re, x   
//$1 is Re, $2 is distance from nearest neuron, $3 is neuron to which probe is closest
//assumes field comes from PY neurons, which are in a row spaced 20um apart
   total_field = 0
   Re = $1
   x = $2
   Ni = $3
   for i = fieldlower, fieldupper {
	total_field += PY[i].ampapostTC.i // sqrt(x^2 + 400*(Ni-i)^2)
   }
   return total_field //* Re/4/PI
}

func gabab()  {local i, Ni, Re, x  
//$1 is Re, $2 is distance from nearest neuron, $3 is neuron to which probe is closest
//assumes field comes from PY neurons, which are in a row spaced 20um apart
   total_field = 0
   Re = $1
   x = $2
   Ni = $3
   for i = fieldlower, fieldupper {
	tmp = 0
	for j = 0, PY[i].gababpost.count()-1 {
		tmp += PY[i].gababpost.object(j).i
	}
	total_field += tmp // sqrt(x^2 + 400*(Ni-i)^2)
   }
   return total_field //* Re/4/PI
   //return PY[0].gababpost.object(0).G
}

func gababTC()  {local i, Ni, Re, x   
//$1 is Re, $2 is distance from nearest neuron, $3 is neuron to which probe is closest
//assumes field comes from PY neurons, which are in a row spaced 20um apart
   total_field = 0
   Re = $1
   x = $2
   Ni = $3
   for i = fieldlower, fieldupper {
	tmp = 0
	for j = 0, TC.gababpost.count()-1 {
	   tmp += TC[i].gababpost.object(j).i 
	}
	total_field += tmp / sqrt(x^2 + 400*(Ni-i)^2)
   }
   return total_field //* Re/4/PI
}

proc advance() {
   fadvance()
   field = xfield(230,fielddist,watchneuron)
//   fieldg = xfieldg(230,fielddist,watchneuron)
//   ampafield = ampa(230,fielddist,watchneuron)
//   gabaafield = gabaa(230,fielddist,watchneuron)
//   gababfield = gabab(230,fielddist,watchneuron)
//   gababTCfield = gababTC(230,fielddist,watchneuron)
}


//----------------------------------------------------------------------------
//  add text
//----------------------------------------------------------------------------

access TC[0].soma

proc text() {
  sprint(gtxt,"%d RE and %d TC cell",nthalamiccells,nthalamiccells)
  addtext(gtxt)
  sprint(gtxt,"Membrane level: kleak=%g",TC.kl.gmax)
  addline(gtxt)
  sprint(gtxt,"Ih: g=%g, ginc=%g, nca=%g, k2=%g, cac=%g", \
  ghbar_iar,ginc_iar,nca_iar,k2_iar,cac_iar)
  addline(gtxt)
  sprint(gtxt,"Ih: nexp=%g, Pc=%g, k4=%g, taum=%g", \
  nexp_iar,Pc_iar,k4_iar,taum_iar)
  addline(gtxt)
  sprint(gtxt,"GABAa_S: Alpha=%g, Beta=%g, Cdur=%g, Cmax=%g", \
  Alpha_GABAa_S,Beta_GABAa_S,Cmax_GABAa_S,Cdur_GABAa_S)
  addline(gtxt)
  sprint(gtxt,"GABAb_S: K1=%g, K2=%g, K3=%g, K4=%g, KD=%g", \
  K1_GABAb_S,K2_GABAb_S,K3_GABAb_S,K4_GABAb_S,KD_GABAb_S)
  addline(gtxt)
}

//text()
print "Use procedure text() to create a new window with actual parameters"
print "Use procedure assign_synapses() to change synaptic conductances"
